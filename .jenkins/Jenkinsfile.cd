pipeline {
    agent any
    options {
        lock("mcp-openapi-cd")
        disableConcurrentBuilds() 
    }
    environment {
        REPO_NAME = 'mcp-openapi'
        DOCKER_IMAGE_NAME = 'mcp-openapi'
        DEPLOYMENT = 'mcp-openapi'
        DEPLOYMENT_SDLC = 'management'
        DOCKER_WORKDIR = '/usr/src/app'
        BRANCH_NAME = "${GIT_BRANCH.split('/').size() > 2 ? GIT_BRANCH.split('/')[1..-1].join('-') : GIT_BRANCH.split('/').join('-')}"
        ECR_REGISTRY = '223287545160.dkr.ecr.us-east-2.amazonaws.com'
        REGION = 'us-east-2'
        ECR_SECRET_ID = "ecr-login"
        EKS_CLUSTER_MANAGEMENT = "balance-management"
    }
    stages {
        stage('Notify slack') {
            steps {
                container('docker') {
                    script { notifySlack(buildStatus="STARTED", channelType="BE-DEPLOYMENT", repo_name="${REPO_NAME}") }
                }
            }
        }
        stage('Clone repository') { 
            steps {
                script {
                    container('jnlp') {
                        deleteDir()
                        checkout scm
                        dir("deployment")
                        {
                            checkout scm: [ $class : 'GitSCM',
                                branches: [[name: "master"]],
                                userRemoteConfigs: [[
                                    credentialsId: 'devops-getbalance-github-repo-token',
                                    url: "https://github.com/blnce-io/deployment.git"
                                ]]
                            ]
                        }
                    }
                }
            }
        }
        stage('Deploy to Management cluster') {
            agent {
                kubernetes {
                    cloud "k8s-agents"
                    serviceAccount "jenkins-k8s-jobs"
                    inheritFrom "jnlp-aws-helm"
                }
            }
            stages {
                stage('Deploy') {
                    steps {
                        container("jnlp") {
                            script { deployHelmChart() }
                        }
                    }
                }
            }
        }
        stage ("Tag docker image as stable and latest") {
            steps {
                container('docker') {
                    script { uploadStableDockerImages("${DOCKER_IMAGE_NAME}", "${TAG_NAME}") }
                }
            }
        }
    }
    post {
        success {
            container('docker') {
                script { notifySlack(buildStatus="SUCCESSFUL", channelType="BE-DEPLOYMENT", repo_name="${REPO_NAME}") }
            }
        }
        failure {
            container('docker') {
                script { notifySlack(buildStatus="FAILURE", channelType="BE-DEPLOYMENT", repo_name="${REPO_NAME}") }
            }
        }
        cleanup {
            cleanWs()
            cleanMachineIfFull()
        }
    }
}

def deployHelmChart() {
    def deployment_dir = "deployment/helm-deployments/${DEPLOYMENT_SDLC}/charts/${DEPLOYMENT}"

    sh "aws eks --region ${REGION} update-kubeconfig --name ${EKS_CLUSTER_MANAGEMENT}"

    def files = []
    dir(deployment_dir) {
        files = sh (script: "ls *.values.yaml", returnStdout: true).trim().split("\n")
    }

    dir ("deployment") {
        helmUpgrade("${DEPLOYMENT}", "${DEPLOYMENT}", files, "--set image.imageTag=${TAG_NAME} --atomic --install --debug --namespace=default", DEPLOYMENT_SDLC)
    }
}
