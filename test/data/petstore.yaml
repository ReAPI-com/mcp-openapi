openapi: 3.0.0
info:
  title: Pet Store API
  version: 1.0.0
  description: A sample Pet Store API with nested schemas and allOf combinations
  x-spec-id: petstore

components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Animal:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        birthDate:
          type: string
          format: date
      required:
        - id
        - name

    Pet:
      allOf:
        - $ref: '#/components/schemas/Animal'
        - type: object
          properties:
            breed:
              type: string
            category:
              type: string
              enum: [DOG, CAT, BIRD, FISH]
            ownerId:
              type: integer
              format: int64
          required:
            - category

    Owner:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        petIds:
          type: array
          items:
            type: integer
            format: int64
      required:
        - id
        - name

    PetWithVaccinations:
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            vaccinations:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  date:
                    type: string
                    format: date
                required:
                  - name
                  - date

paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      parameters:
        - name: category
          in: query
          schema:
            type: string
            enum: [DOG, CAT, BIRD, FISH]
      responses:
        '200':
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a pet
      operationId: createPet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Pet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pets/{petId}/vaccinations:
    get:
      summary: Get pet vaccinations
      operationId: getPetVaccinations
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pet with vaccinations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetWithVaccinations'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 